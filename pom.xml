<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>demo.sherlock</groupId>
	<artifactId>container</artifactId>
	<version>1.0.0-SNAPSHOT</version>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<maven-compiler-plugin.version>3.8.0</maven-compiler-plugin.version>
		<maven-shade-plugin.version>2.4.3</maven-shade-plugin.version>
		<maven-surefire-plugin.version>2.22.1</maven-surefire-plugin.version>
		<exec-maven-plugin.version>1.5.0</exec-maven-plugin.version>

		<vertx.version>4.0.0-milestone5</vertx.version>
		<junit-jupiter.version>5.4.0</junit-jupiter.version>
		<jib.maven.plugin.version>2.5.2</jib.maven.plugin.version>

		<main.verticle>demo.sherlock.container.MainVerticle</main.verticle>

		<!-- for local registry and build use [dockerBuild], requires local docker 
			install use [-Ddocker.build=build] on command line to push direct to push 
			directly to registry use [build] -->
		<docker.build>dockerBuild</docker.build>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>io.vertx</groupId>
				<artifactId>vertx-stack-depchain</artifactId>
				<version>${vertx.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-web</artifactId>
		</dependency>

		<!-- Performance metrics -->
		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-micrometer-metrics</artifactId>
		</dependency>

		<dependency>
			<groupId>io.vertx</groupId>
			<artifactId>vertx-junit5</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit-jupiter.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>${shade.version}</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>${main.verticle}</mainClass>
								</transformer>
							</transformers>
							<outputFile>${project.build.directory}/container-sherlock.jar</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin.version}</version>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>${exec-maven-plugin.version}</version>
				<configuration>
					<mainClass>${main.verticle}</mainClass>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.google.cloud.tools</groupId>
				<artifactId>jib-maven-plugin</artifactId>
				<version>${jib.maven.plugin.version}</version>
				<configuration>
					<from>
						<image>openjdk:8</image>
					</from>
					<to>
						<image>vertx-docker-demo</image>
						<tags>${project.version}</tags>
					</to>
					<extraDirectories>
						<paths>
							<path>
								<from>src/main/docker/scripts</from>
								<into>/opt</into>
							</path>
						</paths>
						<permissions>
							<permission>
								<file>/opt/entry_point.sh</file>
								<mode>555</mode>
							</permission>
						</permissions>
					</extraDirectories>
					<container>
						<creationTime>USE_CURRENT_TIMESTAMP</creationTime>
						<appRoot>/opt/demo</appRoot>
						<entrypoint>
							<entry>/opt/entry_point.sh</entry>
						</entrypoint>
						<ports>
							<port>8000</port>
							<port>8880</port>
							<port>8889</port>
							<port>8890</port>
						</ports>
						<user>demo</user>
						<volumes>
							<volume>/opt/demo</volume>
						</volumes>
					</container>
				</configuration>
				<executions>
					<execution>
						<id>demo</id>
						<phase>package</phase>
						<goals>
							<goal>${docker.build}</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>

</project>
